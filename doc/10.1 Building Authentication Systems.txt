Building Authentication System:
-- DO NOT deviate from industry standards
-- Why Not User Another Package/Service:
	+ Might unknowingly write code that causes a security leak
	+ Can customize requirements for your authentication system if you make it
	+ May end up saving time as you don't have learn someone else's system and
		you will understand yours if you build it
	+ Some services (ex: Auth0) cost extra money and may not be affordable
-- Secure Server with SSL/TLS :
	+ If you store user data, consider getting a certificate for you site so
		you can use HTTPS instead of just HTTP
	+ Once you have a certificate, you should redirect all your web traffic to
		the HTTPS version of your site
	+ This step can be done closer to production and deployment
-- Store (Hash) Passwords Properly :
	+ General rule- if you can decrypt the password, you are making a very bad 
		mistake.
	+ Hash function is a function that can be used to take in data of any 
		arbitrary size and convert it into data of a fixed size.
	+ Act of applying a hash function is called "hashing" and the values 
		returned by a hash function are referred to hash values or hashes.
	+ Multiple input values can return the same hash value, which means you
		can't take the hash value and convert it back into its original input.
	+ Store hashed passwords, not raw passwords.
	+ Hash the password the user typed in and see if it comes out to the same
		hash that is stored in the database to confirm
	+ If your hash function is done well, the chance of different passwords
		being hashed into the same  hash value is so extremely low
	+ Encryption functions are NOT hashing functions. When you encrypt a 
		password, it is reversible using the key (which can possibly be gotten
		when you are hacked)
	+ Salt & Pepper passwords :
		-- Salting a password is the act of adding some random data to the
			password before hashing it.
		-- Salting happens when a user creates a password and when a user tries
			to log in, using the same set of random data at the end each time
		-- This is to prevent hackers from using "rainbow tables" to crack user
			passwords.
		-- "Rainbow tables" are when you generate a very large list of possible
			passwords and then hash each of those passwords.  Then you check the
			hashed values to see if they match the ones generated by your
			application. This works best only if every password is hashed the
			the same way (no salt)
		-- Each user has a different "salt" associated with them.
		-- Salts aren't private data, so a rainbow table can still be used, but
			it would have to be generated for each user because each user has
			a unique salt
		-- Pepper is application specific random data that is attached to a 
			password before hashing, meaning there is a universal pepper
			(random) value we append to every password as well as the salt 
			value in our application.
		-- Pepper value is not stored in the database like salt values are. So
			if someone does gain access to the database but not the application
			then they won't know the pepper value so it's harder to figure out
			the hashed & salted passwords
		-- Peppering is a weaker precaution but it's easy to implement so it's
			worth adding anyways as every little bit helps
	+ Hashing functions often have a variable cost that is used to dictate how
		much work (and sometimes memory) must be used to hash a password.
		-- As the cost goes up, malicious parties will need to spend even more
			CPU power creating rainbow tables.
		-- Cost is a variable because it is meant to change over time as 
			computers get faster
		-- Pick a cost that is high enough to make attacks more difficult but
			low enough that the end user isn't waiting forever for our server
			Ex: bycrpt has DefaultCost that does this for us as long as we keep
			bycrypt updated
