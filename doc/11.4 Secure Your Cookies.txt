Secure Your Cookies:

-- 5 Major Attack vectors regarding cookies:
	+ Cookie tampering
	+ Database leak allowing users to create fake cookies
	+ Cross site scripting (XSS)
	+ Cookie theft via packet sniffing
	+ Cookie theft via physical access to device cookie is stored on

-- Cookie Tampering:
	+ Since cookies are stored on the user's computer they can tamper with the
		cookie.
	+ Digitally sign the data you store in the cookie to help prevent tampering.
		-- This can be done by creating signature to attach to the cookie using
			a hashing function (such as HMAC, JSON Web Tokens).
		-- Validate a user's cookie by hashing the data returned and compare it
			to the hash stored in the cookie to see if they match
	+ Obfuscating cookie data is another way to help prevent tamperings.
		-- Rather than storing data that is easy to fake (ex: email, ID), we will
			store a "remember token" that looks like gibberish and has no clear
			mapping to users
		-- Achieve this by generating a random string everytime a user logs in,
			assigning that string to the user's remember token field, then when
			the user logs in again we find the user via that field
		-- Hash your remember tokens so if someone gains access to the database
			they can't manually create cookies and impersonate users.
		-- Use HMAC (instead of bcrypt) for hashing the remember tokens. We use
			this because bcrypt automatically adds a salt to the hash. With
			remember tokens we need to generate the hash stored in the database
			before we do a query but that isn't possible with bcrypt unless you
			know the salt that was used (which you can't in this order of ops).

-- Cross Site Scripting (XSS):
	+ Type of attack where bad parties attempt to inject JavaScript code into a
		web application and have it run as if the web application provided it
	+ Example: someone creates an account with the username being a JavaScript
		code to do something in particular, and if it were able to make web 
		requests to the server, the user's cookies would be attached to those
		request by default, so the JS could impersonate the user without the user
		knowing. So now when you visit my user profile, the code would get 
		executed and I would have access to all of your resources.
	+ We are using the html/template package to mitigate this (remember: encoding 		text in html templates so that it canâ€™t execute.)
	+ Extra precautions that can be taken: 
		-- If not using a JS framework, or if you don't intend to make web 
			requests with your JavaScript, then you don't need to give scripts
			access to your cookies (especially authentication cookies).
		-- Limit cookies to only browser-intiated web requests
		-- Loosen security when necessary: Err on side of caution and keep as
			many restrictions as possible (especially like cookies) until it
			becomes absolutely necessary to remove a restriction.

-- Packet Sniffing:
	+ Occurs when someone manages to intercept your web requests and steal data
		from them before forwarding them along to where they go
	+ Only real solution is to serve your application over SSL/TLS (https)
	+ This will be gone over later closer to deployment, but make sure whenever
		you are doing deployments in the future that they are secure in this
		regard

-- Physical Theft:
	+ Unable to prevent this from the web application end
	+ Make it easy for a user to invalidate all existing sessions
	+ Our application does this by changing the RememberToken every time a user
		logs in - so all a user needs to do is log in with a new device so all
		past cookies are invalidated
	+ There are other approaches such as session expirations that can be looked
		into if you wish

-- Cross-site Request Forgery (CSRF):
	+ Occures when unauthorized commands are transmitted from a user that the web
		application trusts.
	+ Unlike cross-site scripting (XSS), which exploits the trust a user has for
		a particular site, CSRF exploits the trust that a site has in a user's
		browser
	+ We will implement CSRF tokens later when preparing for production to prevent
		this kind of attack
		