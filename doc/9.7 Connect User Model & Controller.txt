Connect User Model & Controller:
-- Update forms to include fields needed by Model :
	+ Add name field to Sign Up form in the new.gohtml view file- 
		<form action="/signup" method="POST">
			<div class="form-group">
				<label for="name">Name</label>
				<input type="text" name="name" class="form-control" id="name"
					placeholder="Your full name">
			</div>
	+ Update controller of SignupForm to know about new field-
		type SignupForm struct {
			Email    string `schema:"email"`
			Name     string `schema:"name"`
			Password string `schema:"password"`
		}
-- Setup UserService in Web App :
	+ Have user service start when application does so this service can be
		provided to any parts of our application that need it.
		-- Main reason for starting this service and not confining it to just
			the users area is because we don't want to have to write custom
			Postgres connections all through out the code for each area.

	+ For development, in main.go file,add constants with your database location
		and login information to facilitate creating a connection string. 
		const (
			host     = "localhost"
			port     = 5432
			user     = "username"
			password = "your-password"
			dbname   = "appname_dev"
		)
	+ Create a database connection string and then use it to create Model services.
		psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
			"password=%s dbname=%s sslmode=disable",
			host, port, user, password, dbname)

		us, err := models.NewUserService(psqlInfo)
		if err != nil {
			panic(err)
		}
		defer us.Close()
		us.AutoMigrate()
-- Use the open (new) user service in the User controller :
	+ Import models package in the Users controller file
	+ Update User controller struct to have pointer to a UserService instance
		so the handler methods can access the user service when needed.

		type Users struct{
			NewView *views.View
			us *models.UserService
		}
	+ Update NewUsers function to assign a user instance to the field in the 
		Users struct

		func NewUsers(us *models.UserService) *Users {
			return &Users{
				NewView: views.NewView("bootstrap", "users/new"),
				us:      us,
			}
		}
	+ Update controller variable in main.go to use the new required parameter of
		the opened user service.

		usersC := controllers.NewUsers(us)

	+ Update the User controller Create() method to store newly created users in
		the database now:
		-- Use the information from the Signup Form to fill out information in
			the User model.

			user := models.User{
				Name:  form.Name,
				Email: form.Email,
			}
		-- Use the now filled out User model struct and run its Create method to
			store the information for the new user in the database. Return an 
			error if there is an issue creating the user (this will be used during dev).

			if err := u.us.Create(&user); err != nil {
				http.Error(w, err.Error(), http.StatusInternalServerError)
				return
			}
