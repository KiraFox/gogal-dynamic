Implement Password Hashing:
-- Add password fields to User model :
	+ Password field - used to store raw password; never save this field in the
		database ; GORM provides a way via struct tags to prevent saving this
		field
	+ PasswordHash field - will only store hashed passwords and will be stored 
		in the database
	+ Separating the password fields ensures we know when a password has been 
		hashed and which are getting stored in the database
-- Hash passwords before saving :
	+ Use "bcrypt" to do the hashing - golang.org/x/crypto/bcrypt
		-- Hashing package that is part of Go but is maintained outside of the
			standard library under a looser set of guidelines, such as backward
			compatibility
	+ bcrypt GenerateFromPassword is used to generate a password hash from a
		raw use password
	+ bcrypt CompareHashAndPassword is used to compare a user provided password
		with a hash we have stored to verify if they match
	+ Update user service Create method to hash the input passwords before 
		creating a user resource

		func (us *UserService) Create(user *User) error {
			hashedBytes, err := bcrypt.GenerateFromPassword(
				[]byte(user.Password), bcrypt.DefaultCost)
			if err != nil {
				return err
			}
			user.PasswordHash = string(hashedBytes)
			user.Password = ""
			return us.db.Create(user).Error
		}

		-- GenerateFromPassword requires a byte slice so we convert the string
		 	in the user.Password field into one
		-- Cost Parameter: DefaultCost provided by bcrypt is a constant that can
			be changed in the library as CPUs improve so we only need to update
			the bcrypt package to change the DefaultCost without changing the
			code.
		-- GenerateFromPassword returns a byte slice and error so we check for
			errors before filling out the fields in the User model, and we
			convert the hashed byte slice into a string again to be used
		-- Set the Password field to an empty string so that it's no longer
			accessible in the application now that we have a hashed form of it
		-- Create the user in the database with the new fields that were filled
			out
-- Retrieve Passwords from SignUp Form :
	+ Update User controller Create method to get the password from the SignUp
		form like it does with the email and name.

		user := models.User{
			Email:    form.Email,
			Name:     form.Name,
			Password: form.Password,
		}
-- Salt/Pepper Passwords :
	+ bcrypt automatically salts passwords when you use it to hash passwords
		-- The format of the hash generated can be broken down into parts: 
			format, cost, 22 character string (salt), actual hash generated
			using the original password, the salt and the cost
	+ Create pepper variable and add to user model
		-- For now the variable will be inside the users model. Before the 
			application is deployed it will be moved to a config file.
		-- Add the pepper to the user's password provided by the form, then use
			bcrypt to hash/salt the combined password. Eventually the pepper
			will be moved so users can update their password

		userPwPepper = "secret-random-string"

		func (us *UserService) Create(user *User) error {
			pwBytes := []byte(user.Password + userPwPepper)
			hashedBytes, err := bcrypt.GenerateFromPassword(
				pwBytes, bcrypt.DefaultCost)
			if err != nil {
				return err
			}
			user.PasswordHash = string(hashedBytes)
			user.Password = ""
			return us.db.Create(user).Error
		}