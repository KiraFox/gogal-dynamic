Using templates in Go:
-- Templates are text files that are used to create dynamic content.
	+ For example, we could create a template for our galleries, and then the 
	images that we show will change based on which specific gallery a user is 
	viewing.
    + Using HTML directly inside of strings is not maintable and is hard to
    share across multiple webpages.
-- Templates will enable us to create a single layout that uses the same 
navigation bar on every page without needing to rewrite the code multiple time.
	+  This is important because keeping several copies of the same code in 
	sync can be hard to do.
-- Templates will also allow us to add some very basic logic to our web pages.
	+ For example, we might want to show the “Sign Out” button if the user is 
	signed in, but if the user isn’t signed in we instead want to show the 
	“Sign In” and “Sign Up” buttons so that they can start using our 
	application.
-- text/template package - is intended to render templates exactly as they are
without doing any additional work. 
    +This is often useful when writing a code generator or some other tool where
    you need the output to match exactly.
-- html/template - is intended to be used when rendering web pages and has some 
safety features and helpers built into it. 
    + This is useful for preventing code injection, a common security issue in 
    web apps. 
    + Code injection is a common exploit where users try to get your servers or
    visitors of your page to execute code that they write and input into your
    application
    + Go combats this by encoding text in html templates so that it can’t execute.
-- If you are using a plugin to automatically import packages for you, make sure 
it imports the correct template package
-- Template paths are relative. Note that the file paths used to access them are 
relative to wherever you run your code.
    + Ch 4.4 example: we are accessing a file (hello.gohtml) in the same folder
    as our main.go file so we don't need to include a directory.
